#!/bin/bash

source dotfiles/zsh/environment.zsh
source dotfiles/zsh/functions.zsh

function error() {
    echo ""
    echo -e "- error: ${@}"
    echo ""
    exit 1
}

# Print the warning message and continue
function warning() {
    echo -e "- ${@}"
    echo ""
}

function restore_dotfiles() {
    warning "Restoring .${1}"
    cat dotfiles/${1} >> $HOME/.${1}
}

# Count input arguments
if [[ $# != 0 ]]; then
    if [[ $# == 2 ]]; then
        for arg in ${@}; do
            if [[ ${arg} =~ '@' ]]; then
                GIT_USER_MAIL=${arg}
            else
                GIT_USER_NAME="${arg}"
            fi
        done
    else
        error "Additional arguments are required! \nUsage: ./build-setup <github username> <your email> (or vice-versa)"
    fi
fi

DISTRO=$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')
warning "Your are running $DISTRO based distro"
if [[ $DISTRO != 'arch' && $DISTRO != 'fedora' ]]; then
    error "Unsupported distro, this script only supports Arch Linux and Fedora"
fi

PKG_INSTALL_CMD=$([[ $DISTRO == "arch" ]] && echo "pacman -Syu --needed --noconfirm" || echo "dnf install -y")

common_pkgs=(
    android-tools
    clang
    gcc
    npm
    vim
    zsh
)

arch_pkgs=(
    android-udev
    base-devel
    docker
    inter-font
    reflector
    rsync
    ttf-fira-mono
    ttf-ibm-plex
    ttf-roboto
    unzip
    zip
)

fedora_pkgs=(
    dnf-plugins-core
    ibm-plex-mono-fonts
    mozilla-fira-mono-fonts
    google-roboto-fonts 	
    rsms-inter-fonts
)

fedora_docker_pkgs=(
    docker-ce
    docker-ce-cli
    containerd.io
)

zsh_modules=(
    zsh-autosuggestions
    zsh-syntax-highlighting
)

vscodium_extensions=(
    austin.code-gnu-global
    csstools.postcss
    eamodio.gitlens
    ecmel.vscode-html-css
    esbenp.prettier-vscode
    mechatroner.rainbow-csv
    miguelsolorio.min-theme
    mikestead.dotenv
    ms-azuretools.vscode-docker
    ms-python.black-formatter
    ms-python.debugpy
    ms-python.python
    ms-python.vscode-pylance
    ms-vscode.cmake-tools
    ms-vscode.cpptools
    redhat.vscode-xml
    redhat.vscode-yaml
    ritwickdey.liveserver
    rust-lang.rust-analyzer
    shakram02.bash-beautify
    tamasfe.even-better-toml
    thog.vscode-asl
    twxs.cmake
    vadimcn.vscode-lldb
    visualstudioexptteam.intellicode-api-usage-examples
    visualstudioexptteam.vscodeintellicode
    
)

if [[ $DISTRO == "arch" ]]; then
    packages=("${arch_pkgs[@]}")
else
    packages=("${fedora_pkgs[@]}")
fi

if [[ $DISTRO == "arch" ]]; then
    warning "Disabling generation of debug packages for makepkg"
    sudo sed -i "/OPTIONS=/"'s/ debug//' /etc/makepkg.conf
fi

# Install required packages
warning "Installing required packages"
sudo $PKG_INSTALL_CMD ${common_pkgs[@]} ${packages[@]} || error "Error while installing packages"

if [ ! -z $(command -v yay) ]; then
    warning "Installing VSCodium from AUR"
    yay -S --answerclean A --answerdiff N --save vscodium-{bin,bin-marketplace}
fi

if [[ $DISTRO == "fedora" ]]; then
    warning "Adding Fedora Docker repo"
    sudo dnf config-manager --assumeyes --add-repo https://download.docker.com/linux/fedora/docker-ce.repo \
    && $PKG_INSTALL_CMD ${fedora_docker_pkgs[@]} \
    || warning "Failed to install Docker, please return to this step later"
fi

if [[ ! -z $(command -v docker) ]]; then
    warning "Adding user ${USER} to Docker group"
    if [[ -z $(getent group docker) ]]; then
        sudo groupadd docker
    fi
    
    if [[ -z $(id -nG "$USER" | grep docker) ]]; then
        sudo gpasswd -a ${USER} docker
    fi
    
    warning "Enabling Docker service on init"
    sudo systemctl enable docker.service
fi

# Oh My ZSH
if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    warning "Installing OhMyZsh"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    sed -i 's/robbyrussell/agnoster/' $HOME/.zshrc
fi

# Clone some ZSH modules
for module in ${zsh_modules[@]}; do
    git clone https://github.com/zsh-users/${module}.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/${module}
    sed -i "/^plugins=/ s/)/ $module)/" $HOME/.zshrc
done

# Restore core configs
restore_dotfiles zshrc
restore_dotfiles vimrc

# Only load helpers for running distro
sed -i "s/=DISTRO=/$DISTRO/" $HOME/.zshrc

cp -r dotfiles/zsh/ $ZSH_CONFIG

# VSCodium config
warning "Configuring VSCodium"
mkdir -p $HOME/.config/VSCodium/User
cp -rf dotfiles/vscodium/* $HOME/.config/VSCodium/

if [[ $(command -v codium) ]]; then
    warning "Installing VSCodium extensions"
    for extension in ${vscodium_extensions[@]}; do
        codium --install-extension ${extension}
    done
fi

# User configs
warning "Restoring user configurations"
cp -rf dotfiles/config/* $HOME/.config/

# System-wide configs
warning "Copying system configurations"
for conf in etc/*/**; do
    sudo cp $conf /$conf
done

if [[ ! -z "$GIT_USER_MAIL" ]] && [[ ! -z "$GIT_USER_NAME" ]]; then
    # Setup Git
    git config --global user.name "${GIT_USER_NAME}"
    git config --global user.email "${GIT_USER_MAIL}"
    git config --global core.editor vim
    git config --global pull.rebase true
    git config --global init.defaultBranch master
fi

addSSHIdentity personal
cat dotfiles/ssh/config >> $HOME/.ssh/config

[[ $? == 0 ]] && echo "Done! You can now reboot" || echo "The setup ended with errors!"
