#!/bin/bash

source dotfiles/zsh/environment.zsh
source dotfiles/zsh/functions.zsh

function error() {
	echo ""
	echo -e "- error: ${@}"
	echo ""
	exit 1
}

# Print the warning message and continue
function warning() {
	echo ""
	echo -e "- warning: ${@}"
	echo ""
}

# Count input arguments
if [[ $# != 0 ]]; then
	if [[ $# == 2 ]]; then
		for arg in ${@}; do
			if [[ ${arg} =~ '@' ]]; then
				GIT_USER_MAIL=${arg}
			else
				GIT_USER_NAME="${arg}"
			fi
		done
	else
		error "Additional arguments are required! \nUsage: ./build-setup <github username> <your email> (or vice-versa)"
	fi
fi

# Check whether we are running either Debian or Arch based distro
if [[ $(lsb_release -i -s | tr '[:upper:]' '[:lower:]') != 'arch' ]]; then
	error "I exclusively use Arch, go away!"
fi

# Arch4Life
packages=(
	android-tools
	android-udev
	base-devel
	clang
	docker
	gcc
	neofetch
	npm
	reflector
	rsync
	unzip
	zip
	zsh
	zsh-autosuggestions
	zsh-completions
	zsh-syntax-highlighting
)

# Configure multilib, makepkg and update before installing our tools
warning "Configuring multilib"
sudo sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
sudo sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$(nproc --all)\"/g" /etc/makepkg.conf
sudo pacman -Syu --noconfirm || error "Something went wrong while updating packages"

# Install required packages
warning "Installing required packages"
sudo pacman -S --needed --noconfirm ${packages[@]} || error "Error installing packages"

# Cleanup
warning "Cleaning up"
sudo pacman -Sc --noconfirm
pacman -Qtdq | sudo pacman -Rns --noconfirm - 2> /dev/null

# Oh My ZSH
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
sed -i 's/robbyrussell/agnoster/' $HOME/.zshrc

function restore_dotfiles() {
	warning "Restoring .${1}"
	cat dotfiles/${1} >> ~/.${1}
}

# Restore core configs
restore_dotfiles zshrc
restore_dotfiles vimrc

cp -r dotfiles/zsh/ $ZSH_CONFIG

# modprobe.d configs
for conf in etc/*/**; do
	sudo cp $conf /$conf
done

# Add my rules
{
	echo "out/"
	echo "*.ko"
	echo "Image.*"
	echo "zImage*"
	echo "dtbo*"
	echo "net/wireguard"
	echo "*.rej"
	echo ".DS_Store"
	echo ".DS_Store?"
	echo "*.log"
} >> ~/.gitignore_global

if [[ ! -z "$GIT_USER_MAIL" ]] && [[ ! -z "$GIT_USER_NAME" ]]; then
	# Setup Git
	git config --global user.name "${GIT_USER_NAME}"
	git config --global user.email ${GIT_USER_MAIL}
	git config --global url.ssh://git@github.com/.insteadOf https://github.com/
	git config --global core.excludesfile ~/.gitignore_global
	git config --global core.editor vim

	addSSHIdentity $GIT_USER_MAIL personal
fi

[[ $? == 0 ]] && echo "Done! You can now reboot" || echo "The setup ended with errors!"